#include "eval.h"

using S = Score;

// clang-format off
/**
 * Base values for all pieces
 */
constexpr S PIECE_VALUE[] = {
    S( 80, 100),S(306,338),S(322,356),S(538,590),S(1043,1150),S(  0,  0)
};

/**
 * Piece square tables. Generally, we hope these tables help pieces
 * develop to a better square.
 * 
 * Values based on Stockfish 6's PSQT.
 * Reference: https://github.com/official-stockfish/Stockfish/blob/sf_6/src/psqtab.h
 */
constexpr S PIECE_SQUARE_TABLES[6][64] = {
    // Pawns are encouraged to control the center
    {
        S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),
        S(-10,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(-10,  0),
        S( -8,  0),S(  0,  0),S(  5,  0),S( 10,  0),S( 10,  0),S(  5,  0),S(  0,  0),S( -8,  0),
        S(-10,  0),S(  0,  0),S( 10,  0),S( 20,  0),S( 20,  0),S( 10,  0),S(  0,  0),S(-10,  0),
        S(-10,  0),S(  0,  0),S(  5,  0),S( 10,  0),S( 10,  0),S(  5,  0),S(  0,  0),S(-10,  0),
        S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),
        S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),
        S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),S(  0,  0),
    },
    // Knights are most useful if pushed towards the center
    {
        S(-72,-49),S(-54,-41),S(-42,-25),S(-36, -8),S(-36, -8),S(-42,-25),S(-54,-41),S(-72,-49),
        S(-44,-34),S(-21,-26),S( -9,-10),S( -3,  7),S( -3,  7),S( -9,-10),S(-21,-26),S(-44,-34),
        S(-34,-26),S(-12,-19),S(  0, -3),S(  6, 14),S(  6, 14),S(  0, -3),S(-12,-19),S(-34,-26),
        S(-14,-21),S(  8,-13),S( 20,  2),S( 26, 20),S( 26, 20),S( 20,  2),S(  8,-13),S(-14,-21),
        S(-15,-21),S(  7,-13),S( 19,  2),S( 25, 20),S( 25, 20),S( 19,  2),S(  7,-13),S(-15,-21),
        S( -5,-26),S( 17,-19),S( 29, -3),S( 35, 14),S( 35, 14),S( 29, -3),S( 17,-19),S( -5,-26),
        S(-32,-34),S( -9,-26),S(  2,-10),S(  8,  7),S(  8,  7),S(  2,-10),S( -9,-26),S(-32,-34),
        S(-80,-49),S(-32,-41),S(-20,-25),S(-14, -8),S(-14, -8),S(-20,-25),S(-32,-41),S(-80,-49),
    },
    // Bishops are most useful if they control diagonals
    {
        S(-27,-32),S(-13,-21),S(-17,-22),S(-21,-13),S(-21,-13),S(-17,-22),S(-13,-21),S(-27,-32),
        S(-14,-21),S(  4,-10),S(  0,-11),S( -4, -2),S( -4, -2),S(  0,-11),S(  4,-10),S(-14,-21),
        S(-10,-16),S(  8, -5),S(  5, -6),S(  0,  3),S(  0,  3),S(  5, -6),S(  8, -5),S(-10,-16),
        S( -9,-17),S(  9, -6),S(  5, -7),S(  1,  2),S(  1,  2),S(  5, -7),S(  9, -6),S( -9,-17),
        S(-11,-17),S(  7, -6),S(  4, -7),S(  0,  2),S(  0,  2),S(  4, -7),S(  7, -6),S(-11,-17),
        S(-14,-16),S(  4, -5),S(  1, -6),S( -3,  3),S(  3,  3),S(  1, -6),S(  4, -5),S(-14,-16),
        S(-16,-32),S(-11,-21),S(-14,-22),S(-19,-13),S(-19,-13),S(-14,-22),S(-11,-21),S(-16,-32)
    },
    // Rooks generally is not so sensitive to specific squares... But they can
    // infiltrate on the 7th rank!
    {
        S(-22,  3),S(-17,  3),S(-12,  3),S( -8,  3),S( -8,  3),S(-12,  3),S(-17,  3),S(-22,  3),
        S(-22,  3),S( -7,  3),S( -2,  3),S(  2,  3),S(  2,  3),S( -2,  3),S( -7,  3),S(-22,  3),
        S(-22,  3),S( -7,  3),S( -2,  3),S(  2,  3),S(  2,  3),S( -2,  3),S( -7,  3),S(-22,  3),
        S(-22,  3),S( -7,  3),S( -2,  3),S(  2,  3),S(  2,  3),S( -2,  3),S( -7,  3),S(-22,  3),
        S(-22,  3),S( -7,  3),S( -2,  3),S(  2,  3),S(  2,  3),S( -2,  3),S( -7,  3),S(-22,  3),
        S(-22,  3),S( -7,  3),S( -2,  3),S(  2,  3),S(  2,  3),S( -2,  3),S( -7,  3),S(-22,  3),
        S( -6,  3),S(  9,  3),S( 14,  3),S( 18,  3),S( 18,  3),S( 14,  3),S(  9,  3),S( -6,  3),
        S(-22,  3),S(-17,  3),S(-12,  3),S( -8,  3),S( -8,  3),S(-12,  3),S(-17,  3),S(-22,  3)
    },
    // Queens are even less sensitive to specific squares
    {
        S(-2,-80),S(-2,-54),S(-2,-42),S(-2,-30),S(-2,-30),S(-2,-42),S(-2,-54),S(-2,-80),
        S(-2,-54),S( 8,-30),S( 8,-18),S( 8, -6),S( 8, -6),S( 8,-18),S( 8,-30),S(-2,-54),
        S(-2,-42),S( 8,-18),S( 8, -6),S( 8,  6),S( 8,  6),S( 8, -6),S( 8,-18),S(-2,-42),
        S(-2,-30),S( 8, -6),S( 8,  6),S( 8, 18),S( 8, 18),S( 8,  6),S( 8, -6),S(-2,-30),
        S(-2,-30),S( 8, -6),S( 8,  6),S( 8, 18),S( 8, 18),S( 8,  6),S( 8, -6),S(-2,-30),
        S(-2,-42),S( 8,-18),S( 8, -6),S( 8,  6),S( 8,  6),S( 8, -6),S( 8,-18),S(-2,-42),
        S(-2,-54),S( 8,-30),S( 8,-18),S( 8, -6),S( 8, -6),S( 8,-18),S( 8,-30),S(-2,-54),
        S(-2,-80),S(-2,-54),S(-2,-42),S(-2,-30),S(-2,-30),S(-2,-42),S(-2,-54),S(-2,-80)
    },
    // Kings. Important for safety. Encouraged to stay at the corner in middle
    // game and move towards the center in the endgame.
    {
        S(149, 14),S(166, 41),S(137, 54),S(113, 58),S(113, 58),S(137, 54),S(166, 41),S(149, 14),
        S(144, 37),S(161, 64),S(131, 78),S(107, 82),S(107, 82),S(131, 78),S(161, 64),S(144, 37),
        S(112, 56),S(129, 83),S(100, 96),S( 76,100),S( 76,100),S(100, 96),S(129, 83),S(112, 56),
        S( 98, 68),S(115, 95),S( 86,108),S( 62,112),S( 62,112),S( 86,108),S(115, 95),S( 98, 68),
        S( 87, 68),S(104, 95),S( 74,108),S( 50,112),S( 50,112),S( 74,108),S(104, 95),S( 87, 68),
        S( 73, 56),S( 90, 83),S( 61, 96),S( 37,100),S( 37,100),S( 61, 96),S( 90, 83),S( 73, 56),
        S( 60, 37),S( 76, 64),S( 47, 78),S( 23, 82),S( 23, 82),S( 47, 78),S( 76, 64),S( 60, 37),
        S( 49, 14),S( 66, 41),S( 37, 54),S( 13, 58),S( 13, 58),S( 37, 54),S( 66, 41),S( 49, 14)
    }
};

constexpr S MOBILITY_BONUS[6][32] = {
    // Unused
    {},
    // Knights
    {
        S(-31,-40),S(-26,-28),S( -6,-15),S( -2, -8),S(  1,  2),S(  6,  5),S( 11,  8),S( 14, 10),
        S( 16, 12)
    },
    // Bishops
    {
        S(-24,-29),S(-10,-11),S(  8, -1),S( 13,  6),S( 19, 12),S( 25, 21),S( 27, 27),S( 31, 28),
        S( 31, 32),S( 34, 36),S( 40, 39),S( 40, 43),S( 45, 44),S( 49, 48)
    },
    // Rooks
    {
        S(-15,-20),S( -5, -4),S(  0,  5),S(  0,  9),S(  0, 18),S(  3, 25),S(  5, 25),S(  7, 30),
        S( 10, 33),S( 10, 34),S( 10, 39),S( 12, 41),S( 14, 42),S( 14, 42),S( 15, 43)
    },
    // Queens
    {
        S( -8,-12),S( -3, -8),S( -2, -3),S( -2,  5),S(  5, 10),S(  5, 14),S(  5, 15),S(  8, 18),
        S(  9, 20),S( 13, 24),S( 16, 24),S( 16, 25),S( 16, 30),S( 16, 32),S( 17, 33),S( 16, 33),
        S( 18, 34),S( 18, 35),S( 19, 36),S( 19, 26),S( 23, 36),S( 27, 42),S( 27, 42),S( 27, 43),
        S( 23, 45),S( 28, 45),S( 28, 48),S( 29, 52)
    },
    // Unused
    {}
};

constexpr S OUTPOST_BONUS[2][2] = {
    {S( 11,  3), S( 18,  6)}, // Knight
    {S(  5,  1), S(  8,  3)}  // Bishop
};
constexpr S ISOLATED_PAWN_PENALTY = S(3, 8);
constexpr S DOUBLED_PAWN_PENALTY = S(5, 23);
constexpr S MINOR_KING_PROTECTOR = S(3, 4);
constexpr S WEAK_QUEEN_PENALTY = S(25, 5);
constexpr S TRAPPED_ROOK_PENALTY = S(45, 2);
constexpr S OPEN_ROOK_BONUS[2] = {S(  9,  4), S( 22, 10)};
constexpr S BISHOP_PAWN_PENALTY = S(  3,  8);

constexpr S PASSED_PAWN_BONUS[] = {
    S(  0,  0),S(138,130),S( 84, 88),S( 31, 36),S(  8, 20),S(  5, 16),S(  0,  8),S(  0,  0)
};

constexpr int KING_ATTACKER_WEIGHT[] = {
    0, 81, 52, 44, 10, 0
};

constexpr Value TEMPO_BONUS = Value(13);


/**
 * Bitboard masks to test adjacent/neighbor files of a square. Used to 
 * test isolated pawns.
 */
constexpr Bitboard NEIGHBOR_FILES_BB[8] = {
    Bitboard(0x4040404040404040),
    Bitboard(0xA0A0A0A0A0A0A0A0),
    Bitboard(0x5050505050505050),
    Bitboard(0x2828282828282828),
    Bitboard(0x1414141414141414),
    Bitboard(0x0A0A0A0A0A0A0A0A),
    Bitboard(0x0505050505050505),
    Bitboard(0x0202020202020202)
};

constexpr Bitboard OUTPOST_SQUARES[2] = {
    0x000000007E7E7E00,
    0x007E7E7E00000000,
};

/**
 * King rings are 3x3 arears around the king. 
 */
constexpr Bitboard KING_RING_BB[64] = {
    0x70707, 0x70707, 0xe0e0e, 0x1c1c1c, 0x383838, 0x707070, 
    0xe0e0e0, 0xe0e0e0, 0x70707, 0x70707, 0xe0e0e, 0x1c1c1c, 
    0x383838, 0x707070, 0xe0e0e0, 0xe0e0e0, 0x7070700, 0x7070700, 
    0xe0e0e00, 0x1c1c1c00, 0x38383800, 0x70707000, 0xe0e0e000, 0xe0e0e000, 
    0x707070000, 0x707070000, 0xe0e0e0000, 0x1c1c1c0000, 0x3838380000, 0x7070700000, 
    0xe0e0e00000, 0xe0e0e00000, 0x70707000000, 0x70707000000, 0xe0e0e000000, 0x1c1c1c000000, 
    0x383838000000, 0x707070000000, 0xe0e0e0000000, 0xe0e0e0000000, 0x7070700000000, 0x7070700000000, 
    0xe0e0e00000000, 0x1c1c1c00000000, 0x38383800000000, 0x70707000000000, 0xe0e0e000000000, 0xe0e0e000000000, 
    0x707070000000000, 0x707070000000000, 0xe0e0e0000000000, 0x1c1c1c0000000000, 0x3838380000000000, 0x7070700000000000, 
    0xe0e0e00000000000, 0xe0e0e00000000000, 0x707070000000000, 0x707070000000000, 0xe0e0e0000000000, 0x1c1c1c0000000000, 
    0x3838380000000000, 0x7070700000000000, 0xe0e0e00000000000, 0xe0e0e00000000000
};

constexpr Bitboard PAWN_STOPPER_MASK[2][64] = {
    // White
    {
        0x303030303030300, 0x707070707070700, 0xe0e0e0e0e0e0e00, 0x1c1c1c1c1c1c1c00, 
        0x3838383838383800, 0x7070707070707000, 0xe0e0e0e0e0e0e000, 0xc0c0c0c0c0c0c000, 
        0x303030303030000, 0x707070707070000, 0xe0e0e0e0e0e0000, 0x1c1c1c1c1c1c0000, 
        0x3838383838380000, 0x7070707070700000, 0xe0e0e0e0e0e00000, 0xc0c0c0c0c0c00000, 
        0x303030303000000, 0x707070707000000, 0xe0e0e0e0e000000, 0x1c1c1c1c1c000000, 
        0x3838383838000000, 0x7070707070000000, 0xe0e0e0e0e0000000, 0xc0c0c0c0c0000000, 
        0x303030300000000, 0x707070700000000, 0xe0e0e0e00000000, 0x1c1c1c1c00000000, 
        0x3838383800000000, 0x7070707000000000, 0xe0e0e0e000000000, 0xc0c0c0c000000000, 
        0x303030000000000, 0x707070000000000, 0xe0e0e0000000000, 0x1c1c1c0000000000, 
        0x3838380000000000, 0x7070700000000000, 0xe0e0e00000000000, 0xc0c0c00000000000, 
        0x303000000000000, 0x707000000000000, 0xe0e000000000000, 0x1c1c000000000000, 
        0x3838000000000000, 0x7070000000000000, 0xe0e0000000000000, 0xc0c0000000000000, 
        0x300000000000000, 0x700000000000000, 0xe00000000000000, 0x1c00000000000000, 
        0x3800000000000000, 0x7000000000000000, 0xe000000000000000, 0xc000000000000000, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    },
    // Black
    {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7, 0xe, 0x1c, 0x38, 0x70, 
        0xe0, 0xc0, 0x303, 0x707, 0xe0e, 0x1c1c, 0x3838, 0x7070, 0xe0e0, 0xc0c0, 
        0x30303, 0x70707, 0xe0e0e, 0x1c1c1c, 0x383838, 0x707070, 0xe0e0e0, 0xc0c0c0, 
        0x3030303, 0x7070707, 0xe0e0e0e, 0x1c1c1c1c, 0x38383838, 0x70707070, 
        0xe0e0e0e0, 0xc0c0c0c0, 0x303030303, 0x707070707, 0xe0e0e0e0e, 0x1c1c1c1c1c, 
        0x3838383838, 0x7070707070, 0xe0e0e0e0e0, 0xc0c0c0c0c0, 0x30303030303, 
        0x70707070707, 0xe0e0e0e0e0e, 0x1c1c1c1c1c1c, 0x383838383838, 0x707070707070, 
        0xe0e0e0e0e0e0, 0xc0c0c0c0c0c0, 0x3030303030303, 0x7070707070707, 0xe0e0e0e0e0e0e, 
        0x1c1c1c1c1c1c1c, 0x38383838383838, 0x70707070707070, 0xe0e0e0e0e0e0e0, 0xc0c0c0c0c0c0c0 
    }
};

constexpr Bitboard COLORED_SQUARES_MASK[] = {
    0x5555555555555555, // light squares
    0xaaaaaaaaaaaaaaaa  // dark squares
};
