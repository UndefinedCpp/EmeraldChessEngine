#include "eval.h"

using S = Score;

// clang-format off
/**
 * Base values for all pieces
 */
constexpr S PIECE_VALUE[] = {
    S( 67, 145),S(335,343),S(359,402),S(476,587),S(767,1071),S( -21, 28)
};

/**
 * Piece square tables. Generally, we hope these tables help pieces
 * develop to a better square.
 */
constexpr S PIECE_SQUARE_TABLES[6][64] = {
    {
        S(-23,-27),S( -6,-27),S( -4,-24),S(  7,-24),S(  8,-24),S(  9,-23),S(  7,-23),S(-52,-29),
        S(-27, -9),S( -2,-32),S( -3,-18),S( 13,-24),S( 23,-10),S( 15, -9),S( 12,-21),S(-55,-30),
        S(-35,-24),S(-21,-39),S(  6,-33),S( 10,-26),S( 33,-29),S(-23,-27),S(  8,-36),S(-43,-27),
        S(-38,-35),S(  1,-30),S( 18,-47),S( 51,-37),S( 49,-27),S( 19,-34),S( -2,-26),S(-33,-28),
        S(-24,-13),S( -6,-25),S(  1,-31),S( 21,-51),S( 36,-39),S( 24,-29),S(  0, -7),S( -4,-19),
        S(-28, 29),S( -9, 31),S( 11, 37),S( 36, 25),S( 39, 28),S( 30, 17),S( 10, 23),S(  9, 45),
        S(-11, 72),S( -8, 71),S( -4, 51),S(  1, 50),S( -3, 51),S( -2, 46),S( -3, 41),S( -3, 47),
        S(-10, 68),S( -8, 66),S( -4, 49),S( -3, 49),S( -3, 48),S( -3, 46),S( -3, 41),S( -3, 40),
    },
    {
        S(-39, -1),S( -8,  5),S(-11,-14),S(  8, 29),S(  8, 24),S(-11,  4),S(  2, -6),S(-40,-25),
        S(-33,  4),S(  9, -4),S(  8, 12),S( 20, 23),S( 19, 26),S( -1, 14),S(  6, -1),S( -1,  9),
        S(-38,  9),S(  5,  1),S( 16, 26),S( 17, 27),S( 22, 41),S( 35, 27),S( 24,  5),S(-14, -1),
        S( 13, 10),S(  3,  7),S( 15, 54),S( 10, 45),S( 20, 22),S( 15, 33),S(  5, 10),S( 21, 14),
        S( 14, 11),S(  1, 15),S(-10,-11),S( -9, 15),S(-46, 10),S( -3,  8),S(  0,  9),S( 13,  8),
        S( 10,-14),S(  3, -6),S( -5, -9),S(  2,-13),S(  9, -6),S( 10, -2),S(  7, -7),S(  9, -9),
        S(  1,-36),S(  1,-11),S(  4, -6),S(  6, -7),S(  7, -7),S(  1,-17),S( -3,-14),S(  4,-13),
        S(-92,-119),S(  1,-23),S(  3,-21),S(  4,-21),S(  5,-21),S( -2,-22),S( -4,-13),S(-48,-77),
    },
    {
        S( 32,-11),S(  8, -8),S(  3, 19),S(  1, 11),S( -8, 15),S(-13, 33),S(-16, 26),S(-55, -2),
        S(  9, -8),S( 37,  7),S( 25,  5),S( 10, 15),S( 22, 23),S( 12, 34),S( 40, 41),S( 27, 30),
        S( 12,  5),S( 17, 24),S(  7, 37),S( 17, 42),S( 12, 43),S( 30, 34),S(  3, 28),S(  4, 27),
        S( -5, 13),S(-23, 21),S( -9, 23),S( 14, 38),S( 17, 42),S( -6, 40),S( -3,-20),S( 20, -4),
        S( -8,  5),S( -1, 10),S( -3,-41),S(-16, -7),S(-14,-20),S(-16,-24),S(  8, -1),S(  9, -6),
        S( -6,-14),S( -6,  0),S( -5,-33),S(  4,-29),S( -1,-20),S( -5,-24),S(  6, -7),S( 13,  1),
        S( -9,-25),S( -7,  4),S( -6,-13),S( -7,-23),S( -8,-22),S( -8,-34),S( -5,-29),S(-10,-31),
        S(-18,-11),S(-19,-23),S(-18,-26),S(-15,-30),S(-16,-33),S(-18,-39),S(-17,-36),S(-17,-39),
    },
    {
        S(-13,-14),S( -8,-19),S( -9, 17),S( -5, -3),S( 29, 22),S(  4, 52),S(  8,  5),S(  8, -4),
        S(-31,-26),S(-34,-43),S(-20, 17),S(  1,  8),S( 23, 16),S(  0, -2),S(  7, -9),S( -5,-19),
        S(-39,-27),S(-21,-21),S(-17,  1),S(-10,  5),S( -3,  9),S(  8,  9),S(  8,-13),S( -3,-13),
        S(-11, -9),S(-14,-12),S( -8,  2),S( -6, 11),S( -1,  5),S(  1,  1),S( 10,-15),S( -3,-19),
        S(-12, -3),S(-13, -5),S( -4, -2),S( -9,  7),S(  3, 11),S(  4,  0),S(  5, -9),S(  6,  2),
        S( -8, 10),S( -5, -6),S( -2,  8),S( -1, -8),S(  8, 16),S(  8, 13),S(  6,  6),S(  6, -3),
        S(  7, -6),S(  7,  0),S(  9,  9),S( 15, 20),S( 12, -3),S( 13,  1),S(  9,  5),S( 10,  6),
        S(  6,-18),S(  8,  3),S(  9,  3),S( 13, 11),S( 11, 10),S( 11, -1),S( 11,  0),S( 14, 11),
    },
    {
        S(-25,-40),S(-28,-37),S(-16,-29),S( -6, -1),S( -6, 12),S(-20, -7),S(-22, -7),S(-28, -9),
        S(-23,-31),S(-23,-27),S(  9,-13),S( 13,  8),S(  0, 17),S(  0, 10),S( -8,  3),S(-16,  7),
        S(-21,-28),S( -4,-20),S(-18, -1),S(-27, 10),S(-21, 29),S(-27, 22),S(-21, 23),S(-21,  5),
        S(-20,-32),S(-25,-27),S(-35,-13),S(-31, 24),S(-29, 23),S(-28, 25),S(-28, 15),S(-22, 29),
        S(-15,-31),S(-20,-14),S(-21,-12),S(-12, 34),S(-14, 26),S(-27, 23),S(-21, 20),S(-18, 28),
        S(-18,-31),S( -8,-22),S( -4, -3),S( 17,  8),S( 22, 16),S( 39, 19),S(  8, 14),S( 14, 21),
        S(-17,-50),S(-18,-33),S( -1, -8),S( 23,  6),S( 39, 15),S( 41, 19),S( 40, 16),S( 55, 17),
        S( 50,-47),S( 53,-30),S( 52,-17),S( 59,  6),S( 66, 14),S( 66, 19),S( 70, 17),S( 75, 16),    
    },
    {
        S( 10,-125),S( 28,-76),S( 30,-82),S( 14,-80),S( 13,-72),S(-28,-85),S( 44,-89),S( 48,-132),
        S( 20,-72),S( 30,-63),S( 29,-36),S( -7,-37),S( 14,-26),S( 52,-36),S( 48,-65),S( 49,-87),
        S( 10,-49),S(  0,-45),S( -2,-33),S( -6,  5),S(-17, -5),S(-10,-25),S( -5,-68),S( -3,-74),
        S( -7,-23),S( -8,-16),S( -8,  2),S( -8, 35),S(-22, 31),S( -9, 24),S( -9,-12),S( -9,-69),
        S( -8, 25),S( -8, 34),S( -9, 24),S( -8, 44),S( -9, 42),S( -9, 54),S( -9, 44),S(-10,  0),
        S( -9, 24),S( -8, 46),S( -9, 67),S( -8, 47),S( -8, 73),S( -9, 78),S( -9, 56),S(-10, 44),
        S( -9, 42),S( -8, 46),S( -9, 56),S( -9, 49),S( -9, 46),S( -9, 64),S( -9, 62),S( -9, 51),
        S( -8, 41),S( -9, 38),S( -9, 47),S( -8, 47),S( -8, 47),S( -9, 48),S( -9, 50),S( -9, 51),
    }
};

constexpr S MOBILITY_BONUS[6][32] = {
    // Unused
    {},
    // Knights
    {
        S( -5, -5),S( 29, -8),S( 37, 37),S( 38, 33),S( 47, 49),S( 52, 49),S( 61, 64),S( 72, 41),
    },
    // Bishops
    {
        S( 40,-10),S( 48, 18),S( 61, 26),S( 61, 44),S( 69, 48),S( 68, 60),S( 79, 68),S( 72, 78),
        S( 72, 64),S( 72, 63),S( 43, 55),S( 20, 31),S( -7,  8),S(  1, 10),
    },
    // Rooks
    {
        S( -6, 11),S( -4, 28),S( -4, 43),S(  8, 41),S(  8, 35),S( 12, 50),S(  7, 58),S( 22, 48),
        S( 30, 63),S( 34, 55),S( 16, 64),S( 15, 65),S( 10, 53),S(  5, 49),S( -3, 36),
    },
    // Queens
    {
        S( -5, -6),S( -3, -4),S( -9,-14),S( -5,-11),S(  0, -8),S(  4,-13),S( -2, -1),S(  3,  0),
        S(  3, -4),S( -3,  0),S( -5, -6),S(  3, 20),S(  8, 19),S( -4, -1),S(-19, -1),S(  1, 10),
        S( 12,  3),S(  8, 17),S(  3, -1),S( 18,  7),S( 11,  9),S( 10,-10),S( -5, -1),S( -5,-10),
        S( -1, -3),S(  3,  3),S(  2,  5),S(  0,  0),
    },
    // Kings
    {
        S( 19, 23),S( 11,  5),S( 11,  2),S(  3,  0),S(-14,  3),S(-10, -4),S(  6,  5),S(-14,  1),
    }
};

constexpr S SUPPORTED_OUTPOST_BONUS = S(73, 53);
constexpr S SIMPLE_OUTPOST_BONUS= S(72, 62);
constexpr S BISHOP_PAWN_PENALTY = S(3, 2);
constexpr S ROOK_ON_FILE_BONUS = S(28, 23);
constexpr S KING_PROTECTOR_PENALTY = S(1,  9);
constexpr S QUEEN_INFILTRATION_BONUS = S(-9, -3);

constexpr Value TEMPO_BONUS = Value(13);

/**
 * Bitboard masks to test adjacent/neighbor files of a square. Used to 
 * test isolated pawns.
 */
constexpr Bitboard NEIGHBOR_FILES_BB[8] = {
    Bitboard(0x4040404040404040),
    Bitboard(0xA0A0A0A0A0A0A0A0),
    Bitboard(0x5050505050505050),
    Bitboard(0x2828282828282828),
    Bitboard(0x1414141414141414),
    Bitboard(0x0A0A0A0A0A0A0A0A),
    Bitboard(0x0505050505050505),
    Bitboard(0x0202020202020202)
};

constexpr Bitboard OUTPOST_SQUARES[2] = {
    0x000000007E7E7E00,
    0x007E7E7E00000000,
};

constexpr Bitboard SPACE_FOR_MINORS[2] = {
    0x3C3C3C3C00000000,
    0x000000003C3C3C3C
};

/**
 * King rings are 3x3 arears around the king. 
 */
constexpr Bitboard KING_RING_BB[64] = {
    0x70707, 0x70707, 0xe0e0e, 0x1c1c1c, 0x383838, 0x707070, 
    0xe0e0e0, 0xe0e0e0, 0x70707, 0x70707, 0xe0e0e, 0x1c1c1c, 
    0x383838, 0x707070, 0xe0e0e0, 0xe0e0e0, 0x7070700, 0x7070700, 
    0xe0e0e00, 0x1c1c1c00, 0x38383800, 0x70707000, 0xe0e0e000, 0xe0e0e000, 
    0x707070000, 0x707070000, 0xe0e0e0000, 0x1c1c1c0000, 0x3838380000, 0x7070700000, 
    0xe0e0e00000, 0xe0e0e00000, 0x70707000000, 0x70707000000, 0xe0e0e000000, 0x1c1c1c000000, 
    0x383838000000, 0x707070000000, 0xe0e0e0000000, 0xe0e0e0000000, 0x7070700000000, 0x7070700000000, 
    0xe0e0e00000000, 0x1c1c1c00000000, 0x38383800000000, 0x70707000000000, 0xe0e0e000000000, 0xe0e0e000000000, 
    0x707070000000000, 0x707070000000000, 0xe0e0e0000000000, 0x1c1c1c0000000000, 0x3838380000000000, 0x7070700000000000, 
    0xe0e0e00000000000, 0xe0e0e00000000000, 0x707070000000000, 0x707070000000000, 0xe0e0e0000000000, 0x1c1c1c0000000000, 
    0x3838380000000000, 0x7070700000000000, 0xe0e0e00000000000, 0xe0e0e00000000000
};

constexpr Bitboard PAWN_STOPPER_MASK[2][64] = {
    // White
    {
        0x303030303030300, 0x707070707070700, 0xe0e0e0e0e0e0e00, 0x1c1c1c1c1c1c1c00, 
        0x3838383838383800, 0x7070707070707000, 0xe0e0e0e0e0e0e000, 0xc0c0c0c0c0c0c000, 
        0x303030303030000, 0x707070707070000, 0xe0e0e0e0e0e0000, 0x1c1c1c1c1c1c0000, 
        0x3838383838380000, 0x7070707070700000, 0xe0e0e0e0e0e00000, 0xc0c0c0c0c0c00000, 
        0x303030303000000, 0x707070707000000, 0xe0e0e0e0e000000, 0x1c1c1c1c1c000000, 
        0x3838383838000000, 0x7070707070000000, 0xe0e0e0e0e0000000, 0xc0c0c0c0c0000000, 
        0x303030300000000, 0x707070700000000, 0xe0e0e0e00000000, 0x1c1c1c1c00000000, 
        0x3838383800000000, 0x7070707000000000, 0xe0e0e0e000000000, 0xc0c0c0c000000000, 
        0x303030000000000, 0x707070000000000, 0xe0e0e0000000000, 0x1c1c1c0000000000, 
        0x3838380000000000, 0x7070700000000000, 0xe0e0e00000000000, 0xc0c0c00000000000, 
        0x303000000000000, 0x707000000000000, 0xe0e000000000000, 0x1c1c000000000000, 
        0x3838000000000000, 0x7070000000000000, 0xe0e0000000000000, 0xc0c0000000000000, 
        0x300000000000000, 0x700000000000000, 0xe00000000000000, 0x1c00000000000000, 
        0x3800000000000000, 0x7000000000000000, 0xe000000000000000, 0xc000000000000000, 
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    },
    // Black
    {
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7, 0xe, 0x1c, 0x38, 0x70, 
        0xe0, 0xc0, 0x303, 0x707, 0xe0e, 0x1c1c, 0x3838, 0x7070, 0xe0e0, 0xc0c0, 
        0x30303, 0x70707, 0xe0e0e, 0x1c1c1c, 0x383838, 0x707070, 0xe0e0e0, 0xc0c0c0, 
        0x3030303, 0x7070707, 0xe0e0e0e, 0x1c1c1c1c, 0x38383838, 0x70707070, 
        0xe0e0e0e0, 0xc0c0c0c0, 0x303030303, 0x707070707, 0xe0e0e0e0e, 0x1c1c1c1c1c, 
        0x3838383838, 0x7070707070, 0xe0e0e0e0e0, 0xc0c0c0c0c0, 0x30303030303, 
        0x70707070707, 0xe0e0e0e0e0e, 0x1c1c1c1c1c1c, 0x383838383838, 0x707070707070, 
        0xe0e0e0e0e0e0, 0xc0c0c0c0c0c0, 0x3030303030303, 0x7070707070707, 0xe0e0e0e0e0e0e, 
        0x1c1c1c1c1c1c1c, 0x38383838383838, 0x70707070707070, 0xe0e0e0e0e0e0e0, 0xc0c0c0c0c0c0c0 
    }
};

constexpr Bitboard COLORED_SQUARES_MASK[] = {
    0x5555555555555555, // light squares
    0xaaaaaaaaaaaaaaaa  // dark squares
};
